// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	models "purchase-record/internal/models"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// GetOrders provides a mock function with given fields: file
func (_m *IService) GetOrders(file multipart.File) ([]models.PurchaseOrder, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []models.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(multipart.File) ([]models.PurchaseOrder, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(multipart.File) []models.PurchaseOrder); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PurchaseOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(multipart.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
